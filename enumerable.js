// Generated by CoffeeScript 1.3.3
(function() {
  var Enumerable;

  Enumerable = (function() {

    Enumerable.prototype.aliases = {
      collect: 'map',
      entries: 'toA',
      find: 'detect',
      findAll: 'select',
      member: 'include',
      reduce: 'inject'
    };

    Enumerable.prototype.functions = ['all', 'any', 'count', 'detect', 'drop', 'dropWhile', 'eachWithIndex', 'eachWithObject', 'first', 'findIndex', 'groupBy', 'include', 'inject', 'map', 'none', 'one', 'partition', 'reject', 'reverseEach', 'select', 'take', 'takeWhile', 'toA'];

    function Enumerable(obj) {
      this.obj = obj;
      this.addFunctionsToObj(this.obj);
      this.addAliasesToObj(this.obj);
    }

    Enumerable.prototype.addFunctionsToObj = function(obj) {
      var _this = this;
      this.functions.each(function(method) {
        if (!obj[method]) {
          return obj[method] = _this[method];
        }
      });
      return this.obj.enumerator = this;
    };

    Enumerable.prototype.addAliasesToObj = function(obj) {
      var alias, method, _ref, _results;
      _ref = this.aliases;
      _results = [];
      for (alias in _ref) {
        method = _ref[alias];
        if (!obj[alias]) {
          _results.push(obj[alias] = this[method]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Enumerable.prototype.eachWithIndex = function(fn) {
      var index;
      index = 0;
      return this.each(function(item) {
        fn(item, index);
        index += 1;
        return item;
      });
    };

    Enumerable.prototype.count = function(fn) {
      var total;
      total = 0;
      this.each(function() {
        return total += 1;
      });
      return total;
    };

    Enumerable.prototype.map = function(fn) {
      return this.eachWithObject([], function(result, item) {
        return result.push(fn(item));
      });
    };

    Enumerable.prototype.include = function(obj) {
      try {
        this.each(function(item) {
          if (obj === item) {
            return raise('found');
          }
        });
      } catch (error) {
        return true;
      }
      return false;
    };

    Enumerable.prototype.inject = function(injectedItem, fn) {
      this.each(function(item) {
        return injectedItem = fn(injectedItem, item);
      });
      return injectedItem;
    };

    Enumerable.prototype.eachWithObject = function(injectedItem, fn) {
      this.each(function(item) {
        return fn(injectedItem, item);
      });
      return injectedItem;
    };

    Enumerable.prototype.select = function(fn) {
      return this.eachWithObject([], function(selected, item) {
        var result;
        result = fn(item);
        if (result) {
          return selected.push(item);
        }
      });
    };

    Enumerable.prototype.detect = function(fn) {
      var detected;
      detected = null;
      try {
        this.each(function(item) {
          if (fn(item)) {
            detected = item;
            return raise('found');
          }
        });
      } catch (error) {

      }
      return detected;
    };

    Enumerable.prototype.findIndex = function(arg) {
      var detectedIndex;
      detectedIndex = null;
      try {
        this.eachWithIndex(function(item, index) {
          var result;
          if (arg instanceof Function) {
            result = arg(item);
          } else {
            result = item === arg;
          }
          if (result) {
            detectedIndex = index;
            return raise('found');
          }
        });
      } catch (error) {

      }
      return detectedIndex;
    };

    Enumerable.prototype.reject = function(fn) {
      return this.eachWithObject([], function(selected, item) {
        var result;
        result = fn(item);
        if (!result) {
          return selected.push(item);
        }
      });
    };

    Enumerable.prototype.all = function(fn) {
      try {
        this.each(function(item) {
          if (!fn(item)) {
            return raise('found');
          }
        });
      } catch (error) {
        return false;
      }
      return true;
    };

    Enumerable.prototype.any = function(fn) {
      try {
        this.each(function(item) {
          if (fn(item)) {
            return raise('found');
          }
        });
      } catch (error) {
        return true;
      }
      return false;
    };

    Enumerable.prototype.first = function(count) {
      var detected;
      if ((count != null) && count > 1) {
        return this.take(count);
      }
      detected = null;
      try {
        this.each(function(item) {
          detected = item;
          return raise('found');
        });
      } catch (error) {

      }
      return detected;
    };

    Enumerable.prototype.take = function(count) {
      var result;
      result = [];
      this.eachWithIndex(function(item, index) {
        if (index < count) {
          return result.push(item);
        }
      });
      return result;
    };

    Enumerable.prototype.takeWhile = function(fn) {
      var result;
      result = [];
      try {
        this.each(function(item) {
          if (!fn(item)) {
            raise('found');
          }
          return result.push(item);
        });
      } catch (error) {

      }
      return result;
    };

    Enumerable.prototype.drop = function(count) {
      var result;
      result = [];
      this.eachWithIndex(function(item, index) {
        if (!(index < count)) {
          return result.push(item);
        }
      });
      return result;
    };

    Enumerable.prototype.dropWhile = function(fn) {
      var found;
      found = false;
      return this.eachWithObject([], function(result, item) {
        found || (found = !fn(item));
        if (found) {
          return result.push(item);
        }
      });
    };

    Enumerable.prototype.none = function(fn) {
      return !this.any(fn);
    };

    Enumerable.prototype.one = function(fn) {
      var foundOne;
      foundOne = false;
      try {
        this.each(function(item) {
          var result;
          result = fn(item);
          if (foundOne && result) {
            raise('found');
          }
          return foundOne || (foundOne = result);
        });
      } catch (error) {
        return false;
      }
      return foundOne;
    };

    Enumerable.prototype.partition = function(fn) {
      var falseArray, trueArray;
      trueArray = [];
      falseArray = [];
      this.each(function(item) {
        if (fn(item)) {
          return trueArray.push(item);
        } else {
          return falseArray.push(item);
        }
      });
      return [trueArray, falseArray];
    };

    Enumerable.prototype.toA = function() {
      return this.select(function() {
        return true;
      });
    };

    Enumerable.prototype.reverseEach = function(fn) {
      var array;
      array = this.toA();
      array.slice().reverse().each(fn);
      return array;
    };

    Enumerable.prototype.groupBy = function(fn) {
      return this.eachWithObject({}, function(result, item) {
        var key;
        key = fn(item);
        result[key] || (result[key] = []);
        return result[key].push(item);
      });
    };

    Enumerable.makeEnumerable = function(obj) {
      return new Enumerable(obj);
    };

    return Enumerable;

  })();

  Array.prototype.each = function(fn) {
    var item, _i, _len;
    if (!fn) {
      return this.enumerator;
    }
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      item = this[_i];
      fn(item);
    }
    return this;
  };

  Enumerable.makeEnumerable(Array.prototype);

  if (typeof window !== "undefined" && window !== null) {
    window['Enumerable'] = Enumerable;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Enumerable;
  }

}).call(this);
